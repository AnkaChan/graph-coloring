!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Algorithm	include/graph.h	/^	enum Algorithm {kNone,kDSATUR,kChordal,kHybrid,kLMXRLF,kTabuCol};$/;"	g	namespace:GraphColoring
CXXFLAGS	Makefile	/^CXXFLAGS=-Wall$/;"	m
F	include/lmxrlf.h	/^int F = 1;$/;"	v
F	src/lmxrlf.cc	/^int F = 1;$/;"	v
GLOBAL	include/lmxrlf.h	/^int GLOBAL = 10;$/;"	v
GLOBAL	src/lmxrlf.cc	/^int GLOBAL = 10;$/;"	v
Graph	include/graph.h	/^			Graph() { algorithm = kNone; }$/;"	f	class:GraphColoring::Graph
Graph	include/graph.h	/^			explicit Graph(Algorithm new_algorithm) { algorithm = new_algorithm; }$/;"	f	class:GraphColoring::Graph
Graph	include/graph.h	/^	class Graph {$/;"	c	namespace:GraphColoring
Graph	src/graph.cc	/^GraphColoring::Graph::Graph(string new_algorithm) {$/;"	f	class:GraphColoring::Graph
GraphColoring	include/graph.h	/^namespace GraphColoring {$/;"	n
GraphColoring	include/graph_coloring.h	/^namespace GraphColoring{$/;"	n
LARGEPATH	test_cases.mk	/^LARGEPATH=test_cases\/large_test\/$/;"	m
LARGETESTS	test_cases.mk	/^LARGETESTS=$(LARGEPATH)1-FullIns_3.col $(LARGEPATH)1-FullIns_4.col $(LARGEPATH)1-Insertions_4.col\\$/;"	m
LOCAL	include/lmxrlf.h	/^int LOCAL = 10;$/;"	v
LOCAL	src/lmxrlf.cc	/^int LOCAL = 10;$/;"	v
NATURALPATH	test_cases.mk	/^NATURALPATH=test_cases\/natural_test\/$/;"	m
NATURALTESTS	test_cases.mk	/^NATURALTESTS=$(NATURALPATH)bondy_murty_11.txt -t\\$/;"	m
NBMAX	include/tabucol.h	/^int NBMAX = 1000;$/;"	v
NBMAX	src/tabucol.cc	/^const int NBMAX = 1000;$/;"	v
OBJS	Makefile	/^OBJS=main.o\\$/;"	m
PRG	Makefile	/^PRG=graphColoring$/;"	m
REP	include/tabucol.h	/^int REP = 100;$/;"	v
REP	src/tabucol.cc	/^const int REP = 100;$/;"	v
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
SYNTHETICTESTS	test_cases.mk	/^SYNTHETICTESTS=$(SYNTHPATH)input2.txt\\$/;"	m
SYNTHPATH	test_cases.mk	/^SYNTHPATH=test_cases\/synthetic_test\/$/;"	m
TABU_SIZE	include/tabucol.h	/^int TABU_SIZE = 25;$/;"	v
TABU_SIZE	src/tabucol.cc	/^const int TABU_SIZE = 25;$/;"	v
TEST	Makefile	/^TEST=$(WHEEL)$/;"	m
WHEEL	test_cases.mk	/^WHEEL=$(NATURALPATH)wheel_8.txt -t$/;"	m
_DSATUR_H_	src/dsatur.cc	3;"	d	file:
_GLOBAL_GUARD_	src/coloring.cc	3;"	d	file:
_GRAPH_COLORING_H_	include/graph_coloring.h	3;"	d
_GRAPH_H_	include/graph.h	3;"	d
_GUARD_	include/chordal.h	8;"	d
_GUARD_	include/hybrid.h	16;"	d
_GUARD_	include/lmxrlf.h	11;"	d
_GUARD_	include/smallest_stack.h	10;"	d
_GUARD_	include/tabucol.h	10;"	d
_LMXRLF_GUARD_	include/hybrid.h	11;"	d
_LMXRLF_GUARD_	src/coloring.cc	17;"	d	file:
_TABU_GUARD_	include/hybrid.h	21;"	d
_TABU_GUARD_	src/coloring.cc	12;"	d	file:
algorithm	include/graph.h	/^			Algorithm algorithm;$/;"	m	class:GraphColoring::Graph
build_graph	include/parse.h	/^map< string, vector<string> > build_graph(vector< vector<string> > Input)$/;"	f
build_graph	src/graph.cc	/^void GraphColoring::Graph::build_graph(char* input_file) {$/;"	f	class:GraphColoring::Graph
chordal	include/chordal.h	/^map< string,int > chordal(map< string, vector<string> > Graph)$/;"	f
chordal	src/chordal.cc	/^void GraphColoring::Graph::chordal() {$/;"	f	class:GraphColoring::Graph
color	src/graph.cc	/^void GraphColoring::Graph::color(int condition) {$/;"	f	class:GraphColoring::Graph
coloring	include/graph.h	/^			map<string,int> coloring;$/;"	m	class:GraphColoring::Graph
correct	src/coloring.cc	/^void correct(map< string,vector<string> > Graph,map< string,int> Colors)$/;"	f
dsatur	src/dsatur.cc	/^void GraphColoring::Graph::dsatur() {	$/;"	f	class:GraphColoring::Graph
executable	scripts/large_testrun.py	/^executable = '\/Users\/briancrites\/Dropbox\/graph_colorings\/a.out'$/;"	v
f	include/tabucol.h	/^int f(map< string,vector<string> > Graph, map< string,int > Colors)$/;"	f
f	src/tabucol.cc	/^int GraphColoring::Graph::f(map<string,int> coloring) {$/;"	f	class:GraphColoring::Graph
fullpath	scripts/large_testrun.py	/^		fullpath = os.path.join(root, f)$/;"	v
get_algorithm	include/graph.h	/^			Algorithm get_algorithm() { return algorithm; }$/;"	f	class:GraphColoring::Graph
get_algorithm_string	src/graph.cc	/^string GraphColoring::Graph::get_algorithm_string() { $/;"	f	class:GraphColoring::Graph
get_coloring	include/graph.h	/^			map<string,int> get_coloring() { return coloring; }$/;"	f	class:GraphColoring::Graph
get_independent	include/lmxrlf.h	/^vector<string> get_independent(map< string,int > Colors, map< string, vector<string> > Graph, vector<string> set)$/;"	f
get_independent	src/lmxrlf.cc	/^vector<string> GraphColoring::Graph::get_independent(vector<string> set) {$/;"	f	class:GraphColoring::Graph
get_input	include/parse.h	/^vector< vector<string> > get_input(char* input_file)$/;"	f
get_input	src/graph.cc	/^vector< vector<string> > GraphColoring::Graph::get_input(char* input_file) {$/;"	f	class:GraphColoring::Graph
get_subgraph	include/hybrid.h	/^map< string,vector<string> > get_subgraph(map< string,vector<string> > Graph, map< string,int > Colors)$/;"	f
get_subgraph	src/hybrid.cc	/^map< string,vector<string> > GraphColoring::Graph::get_subgraph(map< string,int > coloring) {$/;"	f	class:GraphColoring::Graph
graph	include/graph.h	/^			map<string,vector<string> > graph;$/;"	m	class:GraphColoring::Graph
hybrid	include/hybrid.h	/^map< string,int > hybrid(map< string, vector<string> > Graph, int CARR)$/;"	f
hybrid	src/hybrid.cc	/^void GraphColoring::Graph::hybrid(int CARR) {$/;"	f	class:GraphColoring::Graph
hybrid_dsatur	include/hybrid.h	/^map< string,int > hybrid_dsatur(map< string,vector<string> > Graph)$/;"	f
hybrid_dsatur	src/hybrid.cc	/^void GraphColoring::Graph::hybrid_dsatur() {$/;"	f	class:GraphColoring::Graph
kChordal	include/graph.h	/^	enum Algorithm {kNone,kDSATUR,kChordal,kHybrid,kLMXRLF,kTabuCol};$/;"	e	enum:GraphColoring::Algorithm
kDSATUR	include/graph.h	/^	enum Algorithm {kNone,kDSATUR,kChordal,kHybrid,kLMXRLF,kTabuCol};$/;"	e	enum:GraphColoring::Algorithm
kHybrid	include/graph.h	/^	enum Algorithm {kNone,kDSATUR,kChordal,kHybrid,kLMXRLF,kTabuCol};$/;"	e	enum:GraphColoring::Algorithm
kLMXRLF	include/graph.h	/^	enum Algorithm {kNone,kDSATUR,kChordal,kHybrid,kLMXRLF,kTabuCol};$/;"	e	enum:GraphColoring::Algorithm
kNone	include/graph.h	/^	enum Algorithm {kNone,kDSATUR,kChordal,kHybrid,kLMXRLF,kTabuCol};$/;"	e	enum:GraphColoring::Algorithm
kTabuCol	include/graph.h	/^	enum Algorithm {kNone,kDSATUR,kChordal,kHybrid,kLMXRLF,kTabuCol};$/;"	e	enum:GraphColoring::Algorithm
lmxrlf	include/lmxrlf.h	/^map< string,int > lmxrlf(map< string, vector<string> > Graph, map< string,int > Colors, int endcond)$/;"	f
lmxrlf	src/lmxrlf.cc	/^void GraphColoring::Graph::lmxrlf(int endcond) {$/;"	f	class:GraphColoring::Graph
lmxrlf_base	include/lmxrlf.h	/^map< string,int > lmxrlf_base(map< string,vector<string> > Graph, int endcond)$/;"	f
lmxrlf_base	src/lmxrlf.cc	/^void GraphColoring::Graph::lmxrlf_base(int endcond) {$/;"	f	class:GraphColoring::Graph
main	src/coloring.cc	/^int main(int argc, char** argv)$/;"	f
main	src/main.cc	/^int main(int argc, char** argv)$/;"	f
make_independent_set	include/lmxrlf.h	/^vector<string> make_independent_set(map< string,int > Colors, map< string, vector<string> > Graph)$/;"	f
make_independent_set	src/lmxrlf.cc	/^vector<string> GraphColoring::Graph::make_independent_set() {$/;"	f	class:GraphColoring::Graph
max_objf	include/lmxrlf.h	/^int max_objf(map< string, vector<string> > Graph, vector< vector<string> > list_of_best)$/;"	f
max_objf	src/lmxrlf.cc	/^int GraphColoring::Graph::max_objf(vector< vector<string> > list_of_best) {$/;"	f	class:GraphColoring::Graph
max_pos_objf	include/lmxrlf.h	/^int max_pos_objf(map< string, vector<string> > Graph, vector< vector<string> > list_of_best)$/;"	f
max_pos_objf	src/lmxrlf.cc	/^int GraphColoring::Graph::max_pos_objf(vector< vector<string> > list_of_best) {$/;"	f	class:GraphColoring::Graph
mcs	include/chordal.h	/^stack<string> mcs(map< string, vector<string> > Graph)$/;"	f
mcs	src/chordal.cc	/^stack<string> GraphColoring::Graph::mcs() {$/;"	f	class:GraphColoring::Graph
min_objf	include/lmxrlf.h	/^int min_objf(map< string, vector<string> > Graph, vector< vector<string> > list_of_best)$/;"	f
min_objf	src/lmxrlf.cc	/^int GraphColoring::Graph::min_objf(vector< vector<string> > list_of_best) {$/;"	f	class:GraphColoring::Graph
min_pos_objf	include/lmxrlf.h	/^int min_pos_objf(map< string, vector<string> > Graph, vector< vector<string> > list_of_best)$/;"	f
min_pos_objf	src/lmxrlf.cc	/^int GraphColoring::Graph::min_pos_objf(vector< vector<string> > list_of_best) {$/;"	f	class:GraphColoring::Graph
objf	include/lmxrlf.h	/^int objf(map< string, vector<string> > Graph, vector<string> set)$/;"	f
objf	src/lmxrlf.cc	/^int GraphColoring::Graph::objf(vector<string> set) {$/;"	f	class:GraphColoring::Graph
parse_edge_list	include/parse.h	/^map< string, vector<string> > parse_edge_list(char* input_file)$/;"	f
parse_edge_list	src/graph.cc	/^void GraphColoring::Graph::parse_edge_list(char* input_file) {$/;"	f	class:GraphColoring::Graph
parse_edge_matrix	include/parse.h	/^map< string, vector<string> > parse_edge_matrix(char* input_file)$/;"	f
parse_edge_matrix	src/graph.cc	/^void GraphColoring::Graph::parse_edge_matrix(char* input_file) {$/;"	f	class:GraphColoring::Graph
print_chromatic	src/graph.cc	/^void GraphColoring::Graph::print_chromatic() {$/;"	f	class:GraphColoring::Graph
print_coloring	include/graph_print.h	/^void print_coloring(map< string,int > Colors, string algorithm)$/;"	f
print_coloring	src/graph.cc	/^void GraphColoring::Graph::print_coloring() {$/;"	f	class:GraphColoring::Graph
print_fullstats	include/graph_print.h	/^void print_fullstats(map< string,int > Colors, clock_t start, clock_t end, string algorithm)$/;"	f
print_notime	include/graph_print.h	/^void print_notime(map< string,int > Colors, string algorithm)$/;"	f
set_coloring	include/graph.h	/^			void set_coloring(map<string,int> new_coloring) { coloring = new_coloring; }$/;"	f	class:GraphColoring::Graph
set_graph	include/graph.h	/^			void set_graph(map<string,vector<string> > new_graph) { graph = new_graph; }$/;"	f	class:GraphColoring::Graph
size	include/graph.h	/^			unsigned size() { return graph.size(); }$/;"	f	class:GraphColoring::Graph
smallest_stack	include/smallest_stack.h	/^map< string,int > smallest_stack(map< string, vector<string> > Graph)$/;"	f
split	include/parse.h	/^vector<string> split(string s)$/;"	f
split	src/graph_coloring.cc	/^vector<string> GraphColoring::split(string to_split) {$/;"	f	class:GraphColoring
tabucol	include/tabucol.h	/^map< string,int > tabucol(map< string,vector<string> > Graph, int k)$/;"	f
tabucol	src/tabucol.cc	/^void GraphColoring::Graph::tabucol(int k) {$/;"	f	class:GraphColoring::Graph
uncolored_neighbor	include/lmxrlf.h	/^vector<string> uncolored_neighbor(map< string, vector<string> > Graph, map< string, int > Colors, vector<string> new_set)$/;"	f
uncolored_neighbor	src/lmxrlf.cc	/^vector<string> GraphColoring::Graph::uncolored_neighbor(vector<string> new_set) {$/;"	f	class:GraphColoring::Graph
verify	include/graph_print.h	/^bool verify(map< string,vector<string> > Graph, map< string,int > Colors)$/;"	f
verify	src/graph.cc	/^bool GraphColoring::Graph::verify() {$/;"	f	class:GraphColoring::Graph
